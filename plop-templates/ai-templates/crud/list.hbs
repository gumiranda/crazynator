'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger,
  DropdownMenuSeparator 
} from '@/components/ui/dropdown-menu';
import { 
  Trash2, 
  Edit, 
  Plus, 
  MoreHorizontal, 
  Search, 
  Filter,
  Download,
  RefreshCw,
  Copy
} from 'lucide-react';
import { trpc } from '@/trpc/client';
import { toast } from 'sonner';
import type { {{pascalCase entityName}} } from './types';

interface {{pascalCase entityName}}ListProps {
  onEdit?: (id: string) => void;
  onAdd?: () => void;
  onView?: (id: string) => void;
  className?: string;
}

export default function {{pascalCase entityName}}List({ 
  onEdit, 
  onAdd, 
  onView,
  className 
}: {{pascalCase entityName}}ListProps) {
  const [search, setSearch] = React.useState('');
  const [statusFilter, setStatusFilter] = React.useState<string>('all');
  const [sortBy, setSortBy] = React.useState<'name' | 'createdAt' | 'updatedAt'>('createdAt');
  const [sortOrder, setSortOrder] = React.useState<'asc' | 'desc'>('desc');
  const [selected{{pascalCase entityName}}s, setSelected{{pascalCase entityName}}s] = React.useState<string[]>([]);
  
  const queryParams = {
    limit: 10,
    search: search || undefined,
    status: statusFilter === 'all' ? undefined : statusFilter as any,
    sortBy,
    sortOrder,
  };

  const { 
    data, 
    isLoading, 
    error, 
    fetchNextPage, 
    hasNextPage,
    refetch,
    isFetching
  } = trpc.{{camelCase entityName}}.list.useInfiniteQuery(
    queryParams,
    {
      getNextPageParam: (lastPage) => lastPage.nextCursor,
    }
  );

  const { data: stats } = trpc.{{camelCase entityName}}.stats.useQuery();

  const deleteMutation = trpc.{{camelCase entityName}}.delete.useMutation({
    onSuccess: () => {
      toast.success('{{pascalCase entityName}} deleted successfully');
      refetch();
    },
    onError: (error) => {
      toast.error(error.message || 'Failed to delete {{camelCase entityName}}');
    },
  });

  const bulkDeleteMutation = trpc.{{camelCase entityName}}.bulkDelete.useMutation({
    onSuccess: (result) => {
      toast.success(`${result.deleted} {{camelCase entityName}}s deleted successfully`);
      setSelected{{pascalCase entityName}}s([]);
      refetch();
    },
    onError: (error) => {
      toast.error(error.message || 'Failed to delete {{camelCase entityName}}s');
    },
  });

  const bulkUpdateStatusMutation = trpc.{{camelCase entityName}}.bulkUpdateStatus.useMutation({
    onSuccess: (result) => {
      toast.success(`${result.updated} {{camelCase entityName}}s updated successfully`);
      setSelected{{pascalCase entityName}}s([]);
      refetch();
    },
    onError: (error) => {
      toast.error(error.message || 'Failed to update {{camelCase entityName}}s');
    },
  });

  const duplicateMutation = trpc.{{camelCase entityName}}.duplicate.useMutation({
    onSuccess: () => {
      toast.success('{{pascalCase entityName}} duplicated successfully');
      refetch();
    },
    onError: (error) => {
      toast.error(error.message || 'Failed to duplicate {{camelCase entityName}}');
    },
  });

  const handleDelete = async (id: string) => {
    if (!confirm('Are you sure you want to delete this {{camelCase entityName}}?')) {
      return;
    }
    await deleteMutation.mutateAsync({ id });
  };

  const handleBulkDelete = async () => {
    if (!confirm(`Are you sure you want to delete ${selected{{pascalCase entityName}}s.length} {{camelCase entityName}}s?`)) {
      return;
    }
    await bulkDeleteMutation.mutateAsync({ ids: selected{{pascalCase entityName}}s });
  };

  const handleBulkUpdateStatus = async (status: 'active' | 'inactive' | 'draft') => {
    await bulkUpdateStatusMutation.mutateAsync({ 
      ids: selected{{pascalCase entityName}}s, 
      status 
    });
  };

  const handleDuplicate = async (id: string) => {
    await duplicateMutation.mutateAsync({ id });
  };

  const toggleSelect{{pascalCase entityName}} = (id: string) => {
    setSelected{{pascalCase entityName}}s(prev => 
      prev.includes(id) 
        ? prev.filter(selectedId => selectedId !== id)
        : [...prev, id]
    );
  };

  const toggleSelectAll = () => {
    if (selected{{pascalCase entityName}}s.length === items.length) {
      setSelected{{pascalCase entityName}}s([]);
    } else {
      setSelected{{pascalCase entityName}}s(items.map(item => item.id));
    }
  };

  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case 'active': return 'default';
      case 'inactive': return 'secondary';
      case 'draft': return 'outline';
      default: return 'secondary';
    }
  };

  const items = data?.pages.flatMap(page => page.items) ?? [];
  const total = data?.pages[0]?.total ?? 0;

  if (error) {
    return (
      <Card className={className}>
        <CardContent className="p-6">
          <div className="text-center text-red-600">
            Error loading {{camelCase entityName}}s: {error.message}
            <Button 
              variant="outline" 
              onClick={() => refetch()} 
              className="ml-4"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              Retry
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className={className}>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>{{pascalCase entityName}}s</CardTitle>
              {stats && (
                <div className="flex gap-4 mt-2 text-sm text-muted-foreground">
                  <span>Total: {stats.total}</span>
                  <span>Active: {stats.active}</span>
                  <span>Draft: {stats.draft}</span>
                  <span>Inactive: {stats.inactive}</span>
                </div>
              )}
            </div>
            <div className="flex gap-2">
              <Button onClick={refetch} variant="outline" size="sm" disabled={isFetching}>
                <RefreshCw className={`h-4 w-4 ${isFetching ? 'animate-spin' : ''}`} />
              </Button>
              {onAdd && (
                <Button onClick={onAdd} size="sm">
                  <Plus className="h-4 w-4 mr-2" />
                  Add {{pascalCase entityName}}
                </Button>
              )}
            </div>
          </div>

          {/* Filters */}
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search {{camelCase entityName}}s..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-full sm:w-40">
                <Filter className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
                <SelectItem value="draft">Draft</SelectItem>
              </SelectContent>
            </Select>
            <Select value={`${sortBy}-${sortOrder}`} onValueChange={(value) => {
              const [field, order] = value.split('-');
              setSortBy(field as any);
              setSortOrder(order as any);
            }}>
              <SelectTrigger className="w-full sm:w-48">
                <SelectValue placeholder="Sort by" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="name-asc">Name A-Z</SelectItem>
                <SelectItem value="name-desc">Name Z-A</SelectItem>
                <SelectItem value="createdAt-desc">Newest First</SelectItem>
                <SelectItem value="createdAt-asc">Oldest First</SelectItem>
                <SelectItem value="updatedAt-desc">Recently Updated</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Bulk Actions */}
          {selected{{pascalCase entityName}}s.length > 0 && (
            <div className="flex items-center gap-2 p-3 bg-muted rounded-lg">
              <span className="text-sm font-medium">
                {selected{{pascalCase entityName}}s.length} selected
              </span>
              <div className="flex gap-1">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleBulkUpdateStatus('active')}
                >
                  Mark Active
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleBulkUpdateStatus('inactive')}
                >
                  Mark Inactive
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleBulkUpdateStatus('draft')}
                >
                  Mark Draft
                </Button>
                <Button 
                  variant="destructive" 
                  size="sm"
                  onClick={handleBulkDelete}
                >
                  Delete Selected
                </Button>
              </div>
            </div>
          )}
        </CardHeader>

        <CardContent>
          {isLoading ? (
            <div className="space-y-4">
              {Array.from({ length: 3 }).map((_, i) => (
                <div key={i} className="h-20 bg-muted animate-pulse rounded" />
              ))}
            </div>
          ) : items.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-muted-foreground mb-4">
                {search || statusFilter !== 'all' 
                  ? 'No {{camelCase entityName}}s match your filters' 
                  : 'No {{camelCase entityName}}s found'
                }
              </div>
              {onAdd && (
                <Button onClick={onAdd} variant="outline">
                  <Plus className="h-4 w-4 mr-2" />
                  Create your first {{pascalCase entityName}}
                </Button>
              )}
            </div>
          ) : (
            <div className="space-y-4">
              {/* Header */}
              <div className="flex items-center gap-4 p-3 border-b font-medium text-sm">
                <Checkbox 
                  checked={selected{{pascalCase entityName}}s.length === items.length}
                  onCheckedChange={toggleSelectAll}
                />
                <div className="flex-1">Name</div>
                <div className="w-24">Status</div>
                <div className="w-32">Created</div>
                <div className="w-20">Actions</div>
              </div>

              {/* Items */}
              {items.map((item) => (
                <div
                  key={item.id}
                  className="flex items-center gap-4 p-3 border rounded-lg hover:bg-muted/50 transition-colors"
                >
                  <Checkbox 
                    checked={selected{{pascalCase entityName}}s.includes(item.id)}
                    onCheckedChange={() => toggleSelect{{pascalCase entityName}}(item.id)}
                  />
                  
                  <div className="flex-1 min-w-0">
                    <h3 className="font-medium truncate">{item.name}</h3>
                    {item.description && (
                      <p className="text-sm text-muted-foreground truncate mt-1">
                        {item.description}
                      </p>
                    )}
                  </div>

                  <div className="w-24">
                    <Badge variant={getStatusBadgeVariant(item.status)}>
                      {item.status}
                    </Badge>
                  </div>

                  <div className="w-32 text-sm text-muted-foreground">
                    {new Date(item.createdAt).toLocaleDateString()}
                  </div>

                  <div className="w-20">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="sm">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        {onView && (
                          <DropdownMenuItem onClick={() => onView(item.id)}>
                            View
                          </DropdownMenuItem>
                        )}
                        {onEdit && (
                          <DropdownMenuItem onClick={() => onEdit(item.id)}>
                            <Edit className="h-4 w-4 mr-2" />
                            Edit
                          </DropdownMenuItem>
                        )}
                        <DropdownMenuItem onClick={() => handleDuplicate(item.id)}>
                          <Copy className="h-4 w-4 mr-2" />
                          Duplicate
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem 
                          onClick={() => handleDelete(item.id)}
                          className="text-red-600"
                        >
                          <Trash2 className="h-4 w-4 mr-2" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </div>
              ))}
              
              {hasNextPage && (
                <div className="text-center pt-4">
                  <Button
                    variant="outline"
                    onClick={() => fetchNextPage()}
                    disabled={isFetching}
                  >
                    {isFetching ? 'Loading...' : 'Load More'}
                  </Button>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}