// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Project {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  githubRepository GitHubRepository?
  githubSyncJobs GitHubSyncJob[]
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageType {
  RESULT
  ERROR
}

model Message {
  id        String      @id @default(uuid())
  content   String
  role      MessageRole
  type      MessageType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  fragment  Fragment?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Fragment {
  id        String  @id @default(uuid())
  messageId String  @unique
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt
  sandboxUrl String
  title      String
  files      Json
}



model Usage {
  key    String    @id
  points Int
  expire DateTime?
}
model Subscription {
  id                    String   @id @default(cuid())
  clerkUserId           String   @unique
  stripeCustomerId      String   @unique
  stripeSubscriptionId  String   @unique
  status                String   // active, canceled, past_due, etc.
  priceId               String
  cancelAtPeriodEnd     Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("subscriptions")
}

model GitHubConnection {
  id                String   @id @default(uuid())
  userId            String   @unique
  githubUserId      String   @unique
  githubUsername    String
  accessToken       String   // Encrypted GitHub access token
  refreshToken      String?  // GitHub refresh token (if available)
  tokenExpiresAt    DateTime?
  scope             String   // OAuth scopes granted
  avatarUrl         String?
  profileUrl        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  repositories GitHubRepository[]

  @@map("github_connections")
}

model GitHubRepository {
  id                String   @id @default(uuid())
  projectId         String   @unique
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  githubConnectionId String
  githubConnection  GitHubConnection @relation(fields: [githubConnectionId], references: [id], onDelete: Cascade)
  
  githubRepoId      Int      // GitHub repository ID
  name              String   // Repository name
  fullName          String   // owner/repo format
  description       String?
  isPrivate         Boolean  @default(false)
  defaultBranch     String   @default("main")
  htmlUrl           String   // GitHub repository URL
  cloneUrl          String   // Git clone URL
  
  lastSyncAt        DateTime?
  syncStatus        GitHubSyncStatus @default(PENDING)
  syncError         String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  githubSyncJobs GitHubSyncJob[]

  @@unique([githubConnectionId, githubRepoId])
  @@map("github_repositories")
}

enum GitHubSyncStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
}

enum GitHubSyncJobType {
  PULL_FROM_GITHUB
  PUSH_TO_GITHUB
}

enum GitHubSyncJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model GitHubSyncJob {
  id           String                @id @default(uuid())
  projectId    String
  project      Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repositoryId String?
  repository   GitHubRepository?    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  type         GitHubSyncJobType
  status       GitHubSyncJobStatus  @default(PENDING)
  
  // Progress tracking
  totalFiles   Int                  @default(0)
  processedFiles Int                @default(0)
  failedFiles  Int                  @default(0)
  
  // Batch processing
  totalBatches Int                  @default(0)
  processedBatches Int              @default(0)
  
  // Metadata
  metadata     Json?                // Store additional job-specific data
  error        String?              // Error message if failed
  
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("github_sync_jobs")
}
