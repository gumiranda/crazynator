generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  messages  Message[]
}

model Message {
  id        String      @id @default(uuid())
  content   String
  role      MessageRole
  type      MessageType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  projectId String
  fragment  Fragment?
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Fragment {
  id         String   @id @default(uuid())
  messageId  String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sandboxUrl String
  title      String
  files      Json
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Usage {
  key    String    @id
  points Int
  expire DateTime?
}

model Subscription {
  id                   String             @id @default(uuid())
  userId               String             @unique
  stripeCustomerId     String             @unique
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus
  planId               String
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  billingEvents        BillingEvent[]
  plan                 Plan               @relation(fields: [planId], references: [id])
  usageRecords         UsageRecord[]

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model Plan {
  id              String         @id @default(uuid())
  name            String
  stripePriceId   String         @unique
  stripeProductId String
  price           Int
  currency        String         @default("usd")
  interval        String
  features        Json
  active          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  subscriptions   Subscription[]

  @@index([stripePriceId])
  @@index([active])
}

model UsageRecord {
  id             String       @id @default(uuid())
  subscriptionId String
  resourceType   String
  amount         Int
  timestamp      DateTime     @default(now())
  metadata       Json?
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, resourceType])
  @@index([timestamp])
}

model BillingEvent {
  id             String       @id @default(uuid())
  subscriptionId String
  eventType      String
  stripeEventId  String       @unique
  data           Json
  processedAt    DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([stripeEventId])
  @@index([eventType])
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageType {
  RESULT
  ERROR
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIALING
}
